# Copyright Â© 2018 Booz Allen Hamilton. All Rights Reserved.
# This software package is licensed under the Booz Allen Public License. The license can be found in the License file or at http://boozallen.github.io/licenses/bapl

kind: List
apiVersion: v1
metadata:
  name: sonarqube
items:

- kind: Job
  apiVersion: batch/v1
  metadata:
    name: configure-sonarqube
    namespace: {{ .Release.Namespace }}
    labels:
      app: sonarqube
  spec:
    parallelism: 1
    completions: 1
    template:
      metadata:
        name: configure-sonarqube
      spec:
        restartPolicy: OnFailure
        initContainers: 
        - name: wait-for-sonarqube
          image: centos 
          command: [ "/bin/bash" ]
          args: [ "-c", "until curl -s -u admin:admin http://sonarqube:9000/api/system/health | grep -i green ; do echo \"sleeping..\" && sleep 2; done" ]
        containers:
        - name: configure-sonarqube
          image: centos
          env:
          - name: API_USER
            valueFrom:
              secretKeyRef:
                name: jenkins-access
                key: username
          - name: API_TOKEN
            valueFrom:
              secretKeyRef:
                name: jenkins-access
                key: token
          command: [ "/bin/bash" ]
          args: [ "-c", "curl --user \"$API_USER:$API_TOKEN\" --data-urlencode \"script=$(< /scripts/script.groovy)\" http://jenkins-master:8080/scriptText" ]
          volumeMounts:
            - mountPath: /scripts
              name: configure-sonarqube-mount
        volumes:
          - name: configure-sonarqube-mount
            configMap:
              name: sonarqube-config
              items:
               - key: sonarqube.script
                 path: script.groovy

- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: sonarqube-config
    namespace: {{ .Release.Namespace }}
    labels:
      app: sonarqube
  data:
    sonarqube.script: |
      import com.cloudbees.plugins.credentials.impl.*
      import com.cloudbees.plugins.credentials.*
      import com.cloudbees.plugins.credentials.domains.*
      import jenkins.model.Jenkins
      import hudson.plugins.sonar.SonarInstallation
      import hudson.plugins.sonar.SonarRunnerInstallation
      import hudson.plugins.sonar.SonarRunnerInstaller
      import hudson.plugins.sonar.model.TriggersConfig
      import hudson.tools.InstallSourceProperty

      // Configuration
      String baseUrl = 'http://sonarqube:9000'
      String tokenPath = '/api/user_tokens/generate?name=Jenkins'
      String webhookPath = '/api/settings/set'

      def url = new URL(baseUrl)
      def connection = url.openConnection()
      connection.doOutput = true
      // Auth value = basic creds, base64 encoded
      connection.setRequestProperty ("Authorization", 'Basic YWRtaW46YWRtaW4=');

      while(connection.getResponseCode() != 200) {
        println("waiting for sonar to come up")
        Thread.sleep(20000)
        connection = url.openConnection()
      }

      // Get the token
      url = new URL(baseUrl + tokenPath)
      connection = url.openConnection()
      connection.setRequestMethod("POST")
      connection.doOutput = true
      connection.setRequestProperty ("Authorization", 'Basic YWRtaW46YWRtaW4=');
      def tokenResponse = connection.content.text
      def userToken = (tokenResponse =~ /[a-f0-9]{40}/)[0]

      // Put the token in Jenkins credential store
      Credentials c = (Credentials) new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL, "sonarqube", "API Credentials to Sonarqube", "admin", userToken)
      SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), c)

      // Setup the Sonar Scanner configuration
      def sonar = Jenkins.getInstance().getDescriptor("hudson.plugins.sonar.SonarGlobalConfiguration")
      def inst = new SonarInstallation("SonarQube",
                                   "http://sonarqube:9000",
                                   "", "5.3", "", new TriggersConfig(), "")
      
      sonar.setInstallations(inst)
      def scanner = Jenkins.getInstance().getDescriptor("hudson.plugins.sonar.SonarRunnerInstallation")
      def installer = new SonarRunnerInstaller("3.0.3.778")
      def prop = new InstallSourceProperty([installer])
      def scannerInst = new SonarRunnerInstallation("Sonar Scanner", "", [prop])
      scanner.setInstallations(scannerInst)
      scanner.save()

      // Create the Jenkins webhook
      String webhook = "http://jenkins-master:8080/sonarqube-webhook/"
      url = new URL(baseUrl + webhookPath)
      String encodedValues = java.net.URLEncoder.encode("{\"name\":\"Jenkins\",\"url\":\"$webhook\"}", "UTF-8")
      String urlParameters  = "key=sonar.webhooks.global&fieldValues=$encodedValues";
      connection = url.openConnection()
      connection.setRequestMethod("POST")
      connection.doOutput = true
      connection.setRequestProperty ("Authorization", 'Basic YWRtaW46YWRtaW4=');
      def writer = new OutputStreamWriter(connection.outputStream)
      writer.flush()
      writer.write(urlParameters.toCharArray())
      writer.close()
      connection.connect()
      println connection.content.text
